########################################################################################################################
#General Attributes
# Properties configuration files support the following general attributes:
# advertiser, monitorInterval, name, packages, shutdownHook, shutdownTimeout, status, verbose, and dest.
########################################################################################################################

# The Advertiser plugin name which will be used to advertise individual FileAppender or SocketAppender configurations
# advertiser =

# The minimum amount of time, in seconds, that must elapse before the file configuration is checked for changes.
# This property has a minimum value of 5 seconds
# monitorInterval =

# The name of the configuration
name = PropertiesConfig

# A comma separated list of package names to search for plugins.
# Plugins are only loaded once per classloader so changing this value may not have any effect upon reconfiguration.
# packages =

# Specifies whether or not Log4j should automatically shutdown when the JVM shuts down.
# The shutdown hook is enabled by default but may be disabled by setting this attribute to "disable"
# shutdownHook =

# Specifies how many milliseconds appenders and background tasks will get to shutdown when the JVM shuts down.
# Default is zero which mean that each appender uses its default timeout, and don't wait for background tasks.
# shutdownTimeout =

# Level of (log4j) internal events to log (All events with this level or higher will be logged)
# In order from lowest to highest, levels are as follows:
#   fatal, error, warn, info, debug, trace
status = info

# Enables diagnostic information while loading plugins.
# verbose =

# Where to log to. Accepted values are err (for stderr), out (for stdout), a file path, or a URL
dest = err

########################################################################################################################
#Optional Properties
########################################################################################################################

# Uncomment the following line if using Jansi for ANSI escape sequence support
#log4j.skipJansi = false

########################################################################################################################
#Custom Properties
########################################################################################################################

property.masterLevel = info

########################################################################################################################
# LoggerConfig Section
########################################################################################################################

filters = threshold
filter.threshold.type = ThresholdFilter
filter.threshold.level = debug

appenders = console
appender.console.type = Console
appender.console.name = STDOUT
appender.console.layout.type = PatternLayout
# See https://logging.apache.org/log4j/2.x/manual/layouts.html#Patterns for format specifiers
appender.console.layout.pattern = \
  %highlight{%date{HH:mm:ss.SSS} [Thread=%threadName] %-5level %logger{36} : %msg%n}
# %logger{-2} would use only the last segment of the package name followed by the class name as the logger name
appender.console.layout.disableAnsi=false

# Every configuration must have a root logger.
# If one is not configured, log4j2 will use the default root LoggerConfig,
#   which has a Console appender attached and a level of ERROR.
#The root logger does not have a name attribute.
#The root logger has no parent, and as such, it has no need to support the additivity attribute.
rootLogger.level = error
rootLogger.appenderRef.stdout.ref = STDOUT


# Each LoggerConfig is configured using the logger element.
# The logger element must have a name attribute specified,
#   usually has a level attribute, and sometimes has additivity attribute specified.
logger.MicroAud.name = MicroAud
# The level may be any of: TRACE, DEBUG, INFO, WARN, ERROR, ALL or OFF. If omitted, defaults to ERROR
logger.MicroAud.level = ${masterLevel}
# The additivity attribute may be assigned a value of true or false. If omitted, defaults to true
logger.MicroAud.additivity = false
# The LoggerConfig may also be configured with one or more appenderRef properties.
# Each appender referenced will become associated with the specified LoggerConfig.
# If multiple appenders are configured on the LoggerConfig each of them be called when processing logging events.
# If no appenderRef properties are specified, the logger doesn't seem to log at all
logger.MicroAud.appenderRef.stdout.ref = STDOUT

# Apparently you also dont NEED to prefix each LoggerConfig with "logger.",
# but there's some strange behavior if you dont do so
logger.AssortedUtils.name = AssortedUtils
logger.AssortedUtils.level = ${masterLevel}
logger.AssortedUtils.additivity = false
logger.AssortedUtils.appenderRef.stdout.ref = STDOUT

logger.FileUtils.name = FileUtils
logger.FileUtils.level = ${masterLevel}
logger.FileUtils.additivity = false
logger.FileUtils.appenderRef.stdout.ref = STDOUT

logger.VorbisAudioPlayer.name = VorbisAudioPlayer
logger.VorbisAudioPlayer.level = ${masterLevel}
logger.VorbisAudioPlayer.additivity = false
logger.VorbisAudioPlayer.appenderRef.stdout.ref = STDOUT

logger.BasicAudioPlayer.name = BasicAudioPlayer
logger.BasicAudioPlayer.level = ${masterLevel}
logger.BasicAudioPlayer.additivity = false
logger.BasicAudioPlayer.appenderRef.stdout.ref = STDOUT

logger.Mp3AudioPlayer.name = Mp3AudioPlayer
logger.Mp3AudioPlayer.level = ${masterLevel}
logger.Mp3AudioPlayer.additivity = false
logger.Mp3AudioPlayer.appenderRef.stdout.ref = STDOUT
